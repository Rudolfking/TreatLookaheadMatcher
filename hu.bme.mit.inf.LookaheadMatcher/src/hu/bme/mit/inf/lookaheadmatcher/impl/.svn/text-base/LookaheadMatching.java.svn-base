package hu.bme.mit.inf.lookaheadmatcher.impl;

import java.util.HashMap;
import java.util.Map;

public class LookaheadMatching
{
	private HashMap<LookVariable, Object> matches;
	public HashMap<LookVariable, Object> getMatches()
	{
		return matches;
	}
	public void setMatches(HashMap<LookVariable, Object> matches)
	{
		this.matches = matches;
	}
	/*
	private ArrayList<Object> allMatchedElements;
	public ArrayList<Object> getAllMatchedElements() {
		return allMatchedElements;
	}
	public void setAllMatchedElements(ArrayList<Object> allMatchedElements) {
		this.allMatchedElements = allMatchedElements;
	}*/
	
	private LookVariable[] ParameterLookVariables;
	public LookVariable[] getParameterLookVariables()
	{
		return ParameterLookVariables;
	}
	public void setParameterLookVariables(LookVariable[] parameterLookVariables)
	{
		ParameterLookVariables = parameterLookVariables;
	}
	public HashMap<LookVariable, Object> getParameterMatchesOnly()
	{
		HashMap<LookVariable, Object> ret = new HashMap<LookVariable, Object>();
		for (LookVariable parVar : ParameterLookVariables)
		{
			ret.put(parVar, this.matches.get(parVar));
		}
		return ret;
	}
	public Object[] getParameterMatchValuesOnlyAsArray()
	{
		Object[] ret = new Object[this.ParameterLookVariables.length];
		int ind = 0;
		for (LookVariable parVar : ParameterLookVariables)
		{
			ret[ind++] = this.matches.get(parVar);
		}
		return ret;
	}
	
	
	@SuppressWarnings("unused")
	private LookaheadMatching()
	{
		super();
	}
	
	public LookaheadMatching(LookVariable[] variables, HashMap<LookVariable, Object> foundMatches)
	{
		this.ParameterLookVariables = variables.clone();
		/*this.allMatchedElements = new ArrayList<Object>();
		for (Object object : foundMatches.values()) {
			this.allMatchedElements.add(object);
		}*/
		this.matches = new HashMap<>();
		for (int i = 0; i < variables.length; i++)
		{
			this.matches.put(variables[i], foundMatches.get(variables[i]));
		}
	}
	
	@Override
	public String toString()
	{
		String ret = "";
		for (Map.Entry<LookVariable, Object> entry : this.matches.entrySet())
		{
			ret += "(" + entry.getKey().toString() + "->" + entry.getValue().toString() + ") ";
		}
		return ret;
	}
	
	@Override
	public boolean equals(Object obj)
	{
		if (!(obj instanceof LookaheadMatching))
			return false;
		if (((LookaheadMatching) obj).matches.equals(this.matches))
			return true;
		return false;
		/*LookaheadMatching lookM = ((LookaheadMatching)obj);
		int el,ma;el=ma=0;
		for (Object o : lookM.allMatchedElements) {
			el+=o.hashCode();
		}
		for (Object o : this.allMatchedElements) {
			ma+=o.hashCode();
		}
		if (el==ma)
			return matches.equals(lookM.matches);
		return false;*/
	}
	
	@Override
	public int hashCode()
	{
		/*int ma = 0;
		for (Object o : this.allMatchedElements) {
			ma += o.hashCode();
		}*/
		return matches.hashCode();// + ma;
	}
}
