package hu.bme.mit.inf.lookaheadmatcher.impl;

import java.util.ArrayList;

import org.eclipse.viatra2.patternlanguage.core.patternLanguage.Variable;

public class LookVariable
{
	private String variableName;
	private String prefix;
	private boolean isPrefixed;
	private Variable variable;
	private boolean isSymbolic;
	
	public String getVariableName() {
		return variableName;
	}
	public String getPrefix() {
		return prefix;
	}
	public boolean isPrefixed() {
		return isPrefixed;
	}
	public Variable getVariable() {
		return this.variable;
	}
	public boolean isSymbolic() {
		return isSymbolic;
	}
	public void setSymbolic(boolean symbolic) {
		isSymbolic = symbolic;
	}
	
	@SuppressWarnings("unused")
	private LookVariable()
	{
		super();
	}
	public LookVariable(Variable var, String variableName)
	{
		this.variable = var;
		this.variableName = variableName;
		this.isPrefixed=false;
		this.isSymbolic=false;
		
		ancestor = null;
		Children = new ArrayList<LookVariable>();
	}
	public LookVariable(String prefixlessVariableName)
	{
		this.variable = null;
		this.variableName = prefixlessVariableName;
		this.isPrefixed=false;
		this.isSymbolic=false;
		
		ancestor = null;
		Children = new ArrayList<LookVariable>();
	}
	public LookVariable(String prefixlessVariableName, String prefix)
	{
		this.variable = null;
		this.variableName = prefix+prefixlessVariableName;
		this.prefix=prefix;
		this.isPrefixed=true;
		this.isSymbolic=false;
		
		ancestor = null;
		Children = new ArrayList<LookVariable>();
	}
	public LookVariable(String prefixlessVariableName, String prefix, Variable var)
	{
		this.variable = var;
		this.variableName = prefix+prefixlessVariableName;
		this.prefix=prefix;
		this.isPrefixed=true;
		this.isSymbolic=false;
		
		ancestor = null;
		Children = new ArrayList<LookVariable>();
	}

	public ArrayList<LookVariable> Children;
	
	private LookVariable ancestor;
	public LookVariable getAncestor() {
		return ancestor;
	}
	public void setAncestor(LookVariable ancestor) {
		this.ancestor = ancestor;
	}

	@Override
	public String toString()
	{
		return this.variableName;
	}
	public LookVariable findRoot()
	{
		// step up in the union-where tree
		LookVariable rette = this;
		while(rette.ancestor != null)
		{
			rette = rette.ancestor;
		}
		return rette;
	}
}
